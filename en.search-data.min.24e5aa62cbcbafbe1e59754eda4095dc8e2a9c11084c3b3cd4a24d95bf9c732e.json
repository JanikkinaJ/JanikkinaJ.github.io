[{"id":0,"href":"/posts/turing-machines/","title":"Turing machines","section":"Posts","content":" Description # The turing machine model is not a real machine but rather a model which describes how a Computer would solve a formalized problem. It describes which requirements the algorithm has to ensure the turing machine can correctly execute. Any computer algorithm can be simulated with a turing machine. Parts # Tape # Infinitely long tape (acts like a memory in a normal computer) Squares on the tape are usually blank at the start The squares can have symbols written on them, in this case blank, zero and one (which is why it is a 3-symbol turing machine) TODO Describe Multi tape turing machines here # Head # Has a head which is positioned over one of the squares on the tape The head can perform 3 functions: Read the symbol in the current square under the head Edit the symbol (by writing a new one or erasing it) Move the tape left or right by one square so that the machine can read and edit the symbol on a neighbouring square Machine state # The machine can have a set of states, the state changes what the machine does with the presented information. For example the machine in state zero may write the Symbol read to the next square but in state one may replace a zero with a one and a one with a zero.\nDeterministic vs non deterministic # Whereas In a \u0026ldquo;normal\u0026rdquo; turing machine which is deterministic there is a preperscribed action for each state and only one possible action in a non deterministic turing machine the set of rules may prescribe more than one action to be performed for any given situation. For example: An X on the tape in state 4 may allow the tape to write a Z, move right and switch to state 5, or Write a X, move left and stay in state 4.\nFormal definition # A Turing machine can be formally defined as a tuple of 7 variables \\((Q,q_0,F,\\Gamma,b,\\Sigma,\\delta)\\)\n\\(Q\\) is a finite , set of states (that contains atleast one state) \\(q_0 \\in Q\\) is the initial state, and is one of the states in \\(Q\\) \\(F \\subset Q\\) is the set of accepting states, these are the states that mean the machine has finished \\(\\Gamma\\) is a finite, non empty set of tape symbols (such as 0, 1 or \\(\\Gamma\\)) \\(b \\in \\Gamma\\) is the blank symbol \\(\\Sigma \\subset \\Gamma\\) is the set of input symbols and is a subset of the tape symbols \\(\\delta : (Q /\\ F) \\cdot \\Gamma \\rightarrow Q \\cdot \\Gamma \\cdot \\{L,R\\}\\) is the transition function, which is a partial function The transition function is the \u0026#34;programm\u0026#34; that specifies each action given the current state and the symbol the machine is currently reading A turing machine\u0026#39;s operations sequence is \\(((q\u0026rsquo;_s,h_s,(t_{s,p})^\\infty_{p=-\\infty}\u0026gt;))^\\infty_{s=0}\\)\n\\(q_s\\) is the state of the tape head in the s-th step \\(h_s\\) is the position of the tape head in the s-th step \\(t_{s,p}\\) is the content of the tape in the s-th step and p-th position Example # printing 110 # Trivial example that shows printing 110 to a blank tape Simple programm # try to convert ones to zeros and vice versa What the machine should do:\nread the current symbol If the symbol is a zero or one write the opposing symbol instead Move the tape one right if the symbol is blank end the algorithm As a state table:\nState Symbol read Write instruction Move instruction Next state State 0 Blank None None Stop state State 0 0 Write 1 Move the tape to the right State 0 State 0 1 Write 0 Move the tape to the right State 0 Sources # Cambride university explanation Brilliant turing machine definition cornell definition of turing machine PDf_download of cornell wikipedia: nondeterministic turing machine "}]